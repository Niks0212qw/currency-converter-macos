<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.security.app-sandbox</key>
	<true/>
	<key>com.apple.security.application-groups</key>
	<array>
		<string>group.com.bonitalabs.currencyconverter

// –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
class DebugStorage {
    static let shared = DebugStorage()
    
    enum Keys: String {
        case lastError
        case apiResponse
        case lastUpdated
    }
    
    private let userDefaults = UserDefaults(suiteName: "group.com.yourcompany.currencyconverter")
    
    func saveError(_ error: String) {
        userDefaults?.set(error, forKey: Keys.lastError.rawValue)
        userDefaults?.set(Date(), forKey: Keys.lastUpdated.rawValue)
        userDefaults?.synchronize()
    }
    
    func saveResponse(_ response: String) {
        userDefaults?.set(response, forKey: Keys.apiResponse.rawValue)
        userDefaults?.set(Date(), forKey: Keys.lastUpdated.rawValue)
        userDefaults?.synchronize()
    }
    
    func getLastError() -&gt; String {
        return userDefaults?.string(forKey: Keys.lastError.rawValue) ?? "–ù–µ—Ç –æ—à–∏–±–æ–∫"
    }
    
    func getApiResponse() -&gt; String {
        return userDefaults?.string(forKey: Keys.apiResponse.rawValue) ?? "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    }
    
    func getLastUpdatedTime() -&gt; String {
        guard let date = userDefaults?.object(forKey: Keys.lastUpdated.rawValue) as? Date else {
            return "–ù–∏–∫–æ–≥–¥–∞"
        }
        
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yyyy, HH:mm:ss"
        return formatter.string(from: date)
    }
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
struct CurrencyRateEntry: TimelineEntry {
    let date: Date
    let rates: [CurrencyRate]
    let lastUpdated: String
    let debug: String
}

// –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã
struct CurrencyRate: Identifiable, Hashable {
    var id: String { code }
    let code: String
    let name: String
    let rate: Double
    let flagEmoji: String
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ —Å –¥–≤—É–º—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
    func formattedRate() -&gt; String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        formatter.maximumFractionDigits = 2
        formatter.minimumFractionDigits = 2
        return formatter.string(from: NSNumber(value: rate)) ?? "\(rate)"
    }
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç
struct CurrencyRateProvider: TimelineProvider {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    func placeholder(in context: Context) -&gt; CurrencyRateEntry {
        CurrencyRateEntry(
            date: Date(),
            rates: [
                CurrencyRate(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 85.5, flagEmoji: "üá∫üá∏"),
                CurrencyRate(code: "EUR", name: "–ï–≤—Ä–æ", rate: 92.7, flagEmoji: "üá™üá∫"),
                CurrencyRate(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.65, flagEmoji: "üáπüá∑"),
                CurrencyRate(code: "AED", name: "–î–∏—Ä—Ö–∞–º –û–ê–≠", rate: 23.3, flagEmoji: "üá¶üá™")
            ],
            lastUpdated: "01.01.2025, 12:00",
            debug: "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"
        )
    }
    
    // –°–Ω–µ–ø—à–æ—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    func getSnapshot(in context: Context, completion: @escaping (CurrencyRateEntry) -&gt; Void) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let entry = fallbackEntry("–°–Ω–µ–ø—à–æ—Ç")
        completion(entry)
        
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        loadData { entry in
            completion(entry)
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–π–º–ª–∞–π–Ω–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    func getTimeline(in context: Context, completion: @escaping (Timeline&lt;CurrencyRateEntry&gt;) -&gt; Void) {
        loadData { entry in
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            let nextUpdateDate = Calendar.current.date(byAdding: .minute, value: 15, to: Date()) ?? Date().addingTimeInterval(900)
            let timeline = Timeline(entries: [entry], policy: .after(nextUpdateDate))
            completion(timeline)
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
    private func loadData(completion: @escaping (CurrencyRateEntry) -&gt; Void) {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ
        let defaultEntry = fallbackEntry("–ó–∞–≥—Ä—É–∑–∫–∞...")
        
        // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –¶–ë –†–§
        guard let url = URL(string: "https://www.cbr-xml-daily.ru/daily_json.js") else {
            DebugStorage.shared.saveError("–ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è API –¶–ë –†–§")
            completion(defaultEntry)
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            if let error = error {
                DebugStorage.shared.saveError("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)")
                completion(defaultEntry)
                return
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å HTTP-–æ—Ç–≤–µ—Ç–∞
            if let httpResponse = response as? HTTPURLResponse {
                if httpResponse.statusCode != 200 {
                    DebugStorage.shared.saveError("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ HTTP: \(httpResponse.statusCode)")
                    completion(defaultEntry)
                    return
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            guard let data = data else {
                DebugStorage.shared.saveError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                completion(defaultEntry)
                return
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if let responsePreview = String(data: data.prefix(100), encoding: .utf8) {
                DebugStorage.shared.saveResponse(responsePreview)
            }
            
            // –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
            do {
                // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¶–ë –†–§
                struct CBRResponse: Decodable {
                    let Date: String
                    let Valute: [String: CBRCurrency]
                    
                    struct CBRCurrency: Decodable {
                        let CharCode: String
                        let Name: String
                        let Value: Double
                        let Nominal: Int
                    }
                }
                
                // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                let cbrResponse = try JSONDecoder().decode(CBRResponse.self, from: data)
                var rates: [CurrencyRate] = []
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö
                let requiredCurrencies = ["USD", "EUR", "TRY", "AED"]
                for code in requiredCurrencies {
                    if let currency = cbrResponse.Valute[code] {
                        let rate = currency.Value / Double(currency.Nominal)
                        var name = currency.Name
                        var emoji = "üè¥"
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        switch code {
                        case "USD":
                            name = "–î–æ–ª–ª–∞—Ä –°–®–ê"
                            emoji = "üá∫üá∏"
                        case "EUR":
                            name = "–ï–≤—Ä–æ"
                            emoji = "üá™üá∫"
                        case "TRY":
                            name = "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞"
                            emoji = "üáπüá∑"
                        case "AED":
                            name = "–î–∏—Ä—Ö–∞–º –û–ê–≠"
                            emoji = "üá¶üá™"
                        default:
                            break
                        }
                        
                        rates.append(CurrencyRate(
                            code: code,
                            name: name,
                            rate: rate,
                            flagEmoji: emoji
                        ))
                    }
                }
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                let dateFormatter = DateFormatter()
                dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
                
                let outputFormatter = DateFormatter()
                outputFormatter.dateFormat = "dd.MM.yyyy, HH:mm"
                
                var formattedDate = outputFormatter.string(from: Date())
                
                if let date = dateFormatter.date(from: cbrResponse.Date) {
                    formattedDate = outputFormatter.string(from: date)
                }
                
                // –°–æ–∑–¥–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∏—Å—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                let successEntry = CurrencyRateEntry(
                    date: Date(),
                    rates: rates,
                    lastUpdated: formattedDate,
                    debug: "–û–±–Ω–æ–≤–ª–µ–Ω–æ \(DebugStorage.shared.getLastUpdatedTime())"
                )
                
                completion(successEntry)
                
            } catch {
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                DebugStorage.shared.saveError("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: \(error.localizedDescription)")
                completion(defaultEntry)
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        task.resume()
    }
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
    private func fallbackEntry(_ debugMessage: String) -&gt; CurrencyRateEntry {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yyyy, HH:mm"
        
        return CurrencyRateEntry(
            date: Date(),
            rates: [
                CurrencyRate(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 85.5, flagEmoji: "üá∫üá∏"),
                CurrencyRate(code: "EUR", name: "–ï–≤—Ä–æ", rate: 92.7, flagEmoji: "üá™üá∫"),
                CurrencyRate(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.65, flagEmoji: "üáπüá∑"),
                CurrencyRate(code: "AED", name: "–î–∏—Ä—Ö–∞–º –û–ê–≠", rate: 23.3, flagEmoji: "üá¶üá™")
            ],
            lastUpdated: formatter.string(from: Date()),
            debug: debugMessage + " | –û—à–∏–±–∫–∞: " + DebugStorage.shared.getLastError()
        )
    }
}

// –í–∏–¥ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞
struct CurrencyWidgetMediumView: View {
    var entry: CurrencyRateProvider.Entry
    
    var body: some View {
        VStack(spacing: 0) {
            // –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            VStack(spacing: 8) {
                ForEach(entry.rates) { rate in
                    HStack {
                        Text(rate.flagEmoji)
                            .font(.title2)
                        
                        Text(rate.code)
                            .font(.headline)
                            .foregroundColor(.white)
                        
                        Spacer()
                        
                        Text("\(rate.formattedRate()) ‚ÇΩ")
                            .font(.headline)
                            .foregroundColor(.white)
                    }
                    .padding(.horizontal)
                    
                    if rate.id != entry.rates.last?.id {
                        Divider()
                            .background(Color.gray.opacity(0.3))
                            .padding(.horizontal)
                    }
                }
            }
            .padding(.top, 10)
            
            Spacer()
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –æ—Ç–ª–∞–¥–∫–∞
            VStack(spacing: 2) {
                Text("–û–±–Ω–æ–≤–ª–µ–Ω–æ: \(entry.lastUpdated)")
                    .font(.caption)
                    .foregroundColor(.gray)
                
                Text(entry.debug)
                    .font(.caption2)
                    .foregroundColor(.red)
                    .lineLimit(1)
            }
            .padding(.horizontal)
            .padding(.bottom, 5)
        }
        .background(Color.black)
    }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –≤–∏–¥–∂–µ—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∫–æ–¥—É)
// ...

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
struct CurrencyWidget: Widget {
    let kind: String = "CurrencyWidget"
    
    var body: some WidgetConfiguration {
        StaticConfiguration(kind: kind, provider: CurrencyRateProvider()) { entry in
            CurrencyWidgetEntryView(entry: entry)
        }
        .configurationDisplayName("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
        .description("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —Ä—É–±–ª—é")
        .supportedFamilies([.systemSmall, .systemMedium, .systemLarge])
    }
}

// –í—ã–±–æ—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞
struct CurrencyWidgetEntryView: View {
    var entry: CurrencyRateProvider.Entry
    @Environment(\.widgetFamily) var family
    
    var body: some View {
        switch family {
        case .systemSmall:
            CurrencyWidgetSmallView(entry: entry)
        case .systemMedium:
            CurrencyWidgetMediumView(entry: entry)
        case .systemLarge:
            CurrencyWidgetLargeView(entry: entry)
        default:
            CurrencyWidgetMediumView(entry: entry)
        }
    }
}

// –í–∏–¥—ã –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –∏ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤–∏–¥–∂–µ—Ç–∞

struct CurrencyWidgetSmallView: View {
    var entry: CurrencyRateProvider.Entry
    
    var body: some View {
        VStack(spacing: 5) {
            if !entry.rates.isEmpty {
                HStack {
                    Text(entry.rates[0].flagEmoji)
                        .font(.title2)
                    
                    VStack(alignment: .leading) {
                        Text(entry.rates[0].code)
                            .font(.headline)
                            .foregroundColor(.white)
                        
                        Text("\(entry.rates[0].formattedRate()) ‚ÇΩ")
                            .font(.subheadline)
                            .foregroundColor(.white)
                    }
                }
                
                Divider()
                    .background(Color.gray.opacity(0.3))
                    .padding(.horizontal)
                
                if entry.rates.count &gt; 1 {
                    HStack {
                        Text(entry.rates[1].flagEmoji)
                            .font(.title2)
                        
                        VStack(alignment: .leading) {
                            Text(entry.rates[1].code)
                                .font(.headline)
                                .foregroundColor(.white)
                            
                            Text("\(entry.rates[1].formattedRate()) ‚ÇΩ")
                                .font(.subheadline)
                                .foregroundColor(.white)
                        }
                    }
                }
            }
            
            Spacer()
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            Text(entry.debug)
                .font(.caption2)
                .foregroundColor(.red)
                .lineLimit(1)
                .padding(.bottom, 2)
        }
        .padding(10)
        .background(Color.black)
    }
}

struct CurrencyWidgetLargeView: View {
    var entry: CurrencyRateProvider.Entry
    
    var body: some View {
        VStack(spacing: 10) {
            VStack(spacing: 15) {
                ForEach(entry.rates) { rate in
                    HStack(spacing: 15) {
                        ZStack {
                            Circle()
                                .fill(Color.white)
                                .frame(width: 50, height: 50)
                            Text(rate.flagEmoji)
                                .font(.title)
                        }
                        
                        VStack(alignment: .leading, spacing: 5) {
                            Text(rate.name)
                                .font(.headline)
                                .foregroundColor(.white)
                            
                            Text(rate.code)
                                .font(.subheadline)
                                .foregroundColor(.gray)
                        }
                        
                        Spacer()
                        
                        Text("\(rate.formattedRate()) ‚ÇΩ")
                            .font(.title3)
                            .fontWeight(.bold)
                            .foregroundColor(.white)
                    }
                    .padding(.horizontal)
                    
                    if rate.id != entry.rates.last?.id {
                        Divider()
                            .background(Color.gray.opacity(0.3))
                            .padding(.horizontal)
                    }
                }
            }
            .padding(.top, 15)
            
            Spacer()
            
            VStack(spacing: 2) {
                Text("–û–±–Ω–æ–≤–ª–µ–Ω–æ: \(entry.lastUpdated)")
                    .font(.caption)
                    .foregroundColor(.gray)
                
                Text(entry.debug)
                    .font(.caption2)
                    .foregroundColor(.red)
                    .lineLimit(1)
            }
            .padding(.horizontal)
        }
        .padding(.vertical, 15)
        .background(Color.black)
group.com.bonitalabs.currencyconverter</string>
	</array>
	<key>com.apple.security.network.client</key>
	<true/>
	<key>com.apple.security.network.server</key>
	<true/>
</dict>
</plist>
