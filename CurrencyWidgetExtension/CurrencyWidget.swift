import WidgetKit
import SwiftUI

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
struct CurrencyRateEntry: TimelineEntry {
    let date: Date
    let rates: [CurrencyRate]
}

// –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç—ã
struct CurrencyRate: Identifiable, Hashable {
    var id: String { code }
    let code: String
    let name: String
    let rate: Double
    let flagEmoji: String
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ —Å –¥–≤—É–º—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
    func formattedRate() -> String {
        let formatter = NumberFormatter()
        formatter.numberStyle = .decimal
        formatter.maximumFractionDigits = 2
        formatter.minimumFractionDigits = 2
        return formatter.string(from: NSNumber(value: rate)) ?? "\(rate)"
    }
}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç
struct CurrencyRateProvider: TimelineProvider {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    func placeholder(in context: Context) -> CurrencyRateEntry {
        CurrencyRateEntry(
            date: Date(),
            rates: [
                CurrencyRate(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 85.5, flagEmoji: "üá∫üá∏"),
                CurrencyRate(code: "EUR", name: "–ï–≤—Ä–æ", rate: 92.7, flagEmoji: "üá™üá∫"),
                CurrencyRate(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.65, flagEmoji: "üáπüá∑"),
                CurrencyRate(code: "AED", name: "–î–∏—Ä—Ö–∞–º –û–ê–≠", rate: 23.3, flagEmoji: "üá¶üá™")
            ]
        )
    }
    
    // –°–Ω–µ–ø—à–æ—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    func getSnapshot(in context: Context, completion: @escaping (CurrencyRateEntry) -> Void) {
        // –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let fallbackEntry = fallbackEntry()
        completion(fallbackEntry)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ CurrencyDataService
        let (sharedRates, _) = CurrencyDataService.getCurrencyRates()
        if !sharedRates.isEmpty {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            let rates = sharedRates.map { CurrencyRate(
                code: $0.code,
                name: $0.name,
                rate: $0.rate,
                flagEmoji: $0.flagEmoji
            )}
            
            completion(CurrencyRateEntry(date: Date(), rates: rates))
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –¶–ë –†–§
            simpleFetchCBRF { entry in
                completion(entry)
            }
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–π–º–ª–∞–π–Ω–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    func getTimeline(in context: Context, completion: @escaping (Timeline<CurrencyRateEntry>) -> Void) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if CurrencyDataService.isDataFresh(within: 60) {
            let (sharedRates, lastUpdated) = CurrencyDataService.getCurrencyRates()
            if !sharedRates.isEmpty {
                let rates = sharedRates.map { CurrencyRate(
                    code: $0.code,
                    name: $0.name,
                    rate: $0.rate,
                    flagEmoji: $0.flagEmoji
                )}
                
                let entry = CurrencyRateEntry(date: lastUpdated, rates: rates)
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 1-2 —á–∞—Å–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                let nextUpdate = Calendar.current.date(byAdding: .hour, value: 1, to: Date()) ?? Date().addingTimeInterval(3600)
                let timeline = Timeline(entries: [entry], policy: .after(nextUpdate))
                completion(timeline)
                return
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
        simpleFetchCBRF { entry in
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
            let nextUpdate = Calendar.current.date(byAdding: .hour, value: 3, to: Date()) ?? Date().addingTimeInterval(10800)
            let timeline = Timeline(entries: [entry], policy: .after(nextUpdate))
            completion(timeline)
        }
    }
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –¶–ë –†–§
    private func simpleFetchCBRF(completion: @escaping (CurrencyRateEntry) -> Void) {
        // URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –¶–ë –†–§
        guard let url = URL(string: "https://www.cbr-xml-daily.ru/daily_json.js") else {
            completion(fallbackEntry())
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –º–∞–ª—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞
        let request = URLRequest(url: url,
                                 cachePolicy: .reloadIgnoringLocalAndRemoteCacheData,
                                 timeoutInterval: 5)
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫
            guard let data = data, error == nil else {
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
                fallbackToExchangeRate { entry in
                    completion(entry)
                }
                return
            }
            
            // –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JSONSerialization –≤–º–µ—Å—Ç–æ –¥–µ–∫–æ–¥–µ—Ä–∞
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let valute = json["Valute"] as? [String: [String: Any]] {
                    
                    var rates: [CurrencyRate] = []
                    
                    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã
                    let requiredCurrencies = [
                        ("USD", "–î–æ–ª–ª–∞—Ä –°–®–ê", "üá∫üá∏"),
                        ("EUR", "–ï–≤—Ä–æ", "üá™üá∫"),
                        ("TRY", "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", "üáπüá∑"),
                        ("AED", "–î–∏—Ä—Ö–∞–º –û–ê–≠", "üá¶üá™")
                    ]
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    for (code, name, flagEmoji) in requiredCurrencies {
                        if let currencyData = valute[code],
                           let value = currencyData["Value"] as? Double,
                           let nominal = currencyData["Nominal"] as? Int {
                            // –í—ã—á–∏—Å–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —Å —É—á–µ—Ç–æ–º –Ω–æ–º–∏–Ω–∞–ª–∞
                            let rate = value / Double(nominal)
                            
                            rates.append(CurrencyRate(
                                code: code,
                                name: name,
                                rate: rate,
                                flagEmoji: flagEmoji
                            ))
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –≤–∞–ª—é—Ç—ã
                    if rates.count < requiredCurrencies.count {
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞–ª—é—Ç—ã —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                        let existingCodes = rates.map { $0.code }
                        for (code, name, flagEmoji) in requiredCurrencies {
                            if !existingCodes.contains(code) {
                                // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                                let backupRate: Double
                                switch code {
                                case "USD": backupRate = 85.5
                                case "EUR": backupRate = 92.7
                                case "TRY": backupRate = 2.65
                                case "AED": backupRate = 23.3
                                default: backupRate = 1.0
                                }
                                
                                rates.append(CurrencyRate(
                                    code: code,
                                    name: name,
                                    rate: backupRate,
                                    flagEmoji: flagEmoji
                                ))
                            }
                        }
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∏—Å—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    let successEntry = CurrencyRateEntry(
                        date: Date(),
                        rates: rates
                    )
                    
                    DispatchQueue.main.async {
                        completion(successEntry)
                    }
                } else {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
                    fallbackToExchangeRate { entry in
                        completion(entry)
                    }
                }
            } catch {
                // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
                fallbackToExchangeRate { entry in
                    completion(entry)
                }
            }
        }
        
        // –ó–∞–¥–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        DispatchQueue.global().asyncAfter(deadline: .now() + 6) {
            if task.state == .running {
                task.cancel()
                // –ü—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
                fallbackToExchangeRate { entry in
                    completion(entry)
                }
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        task.resume()
    }
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø–∞—Å–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ - ExchangeRate API
    private func fallbackToExchangeRate(completion: @escaping (CurrencyRateEntry) -> Void) {
        // –ï—Å–ª–∏ –∑–∞–ø–∞—Å–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        let defaultEntry = fallbackEntry()
        
        // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ExchangeRate API
        guard let url = URL(string: "https://open.er-api.com/v6/latest/USD") else {
            completion(defaultEntry)
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –º–∞–ª—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        let request = URLRequest(url: url,
                                 cachePolicy: .reloadIgnoringLocalAndRemoteCacheData,
                                 timeoutInterval: 5)
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫
            guard let data = data, error == nil else {
                completion(defaultEntry)
                return
            }
            
            // –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JSONSerialization
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let rates = json["rates"] as? [String: Double],
                   let rubRate = rates["RUB"] {
                    
                    var currencyRates: [CurrencyRate] = []
                    
                    // USD –∫ —Ä—É–±–ª—é (1 USD = X RUB)
                    currencyRates.append(CurrencyRate(
                        code: "USD",
                        name: "–î–æ–ª–ª–∞—Ä –°–®–ê",
                        rate: rubRate,
                        flagEmoji: "üá∫üá∏"
                    ))
                    
                    // EUR –∫ —Ä—É–±–ª—é
                    if let eurRate = rates["EUR"] {
                        let eurToRub = rubRate / eurRate
                        currencyRates.append(CurrencyRate(
                            code: "EUR",
                            name: "–ï–≤—Ä–æ",
                            rate: eurToRub,
                            flagEmoji: "üá™üá∫"
                        ))
                    }
                    
                    // TRY –∫ —Ä—É–±–ª—é
                    if let tryRate = rates["TRY"] {
                        let tryToRub = rubRate / tryRate
                        currencyRates.append(CurrencyRate(
                            code: "TRY",
                            name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞",
                            rate: tryToRub,
                            flagEmoji: "üáπüá∑"
                        ))
                    }
                    
                    // AED –∫ —Ä—É–±–ª—é
                    if let aedRate = rates["AED"] {
                        let aedToRub = rubRate / aedRate
                        currencyRates.append(CurrencyRate(
                            code: "AED",
                            name: "–î–∏—Ä—Ö–∞–º –û–ê–≠",
                            rate: aedToRub,
                            flagEmoji: "üá¶üá™"
                        ))
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç
                    if currencyRates.count >= 2 {
                        let successEntry = CurrencyRateEntry(
                            date: Date(),
                            rates: currencyRates
                        )
                        
                        DispatchQueue.main.async {
                            completion(successEntry)
                        }
                        return
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                completion(defaultEntry)
                
            } catch {
                // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                completion(defaultEntry)
            }
        }
        
        // –ó–∞–¥–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        DispatchQueue.global().asyncAfter(deadline: .now() + 6) {
            if task.state == .running {
                task.cancel()
                completion(defaultEntry)
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        task.resume()
    }
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
    private func fallbackEntry() -> CurrencyRateEntry {
        return CurrencyRateEntry(
            date: Date(),
            rates: [
                CurrencyRate(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 85.5, flagEmoji: "üá∫üá∏"),
                CurrencyRate(code: "EUR", name: "–ï–≤—Ä–æ", rate: 92.7, flagEmoji: "üá™üá∫"),
                CurrencyRate(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.65, flagEmoji: "üáπüá∑"),
                CurrencyRate(code: "AED", name: "–î–∏—Ä—Ö–∞–º –û–ê–≠", rate: 23.3, flagEmoji: "üá¶üá™")
            ]
        )
    }
}
    // –í–∏–¥ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞
struct CurrencyWidgetMediumView: View {
    var entry: CurrencyRateProvider.Entry
    @Environment(\.colorScheme) private var colorScheme
    
    var body: some View {
        GeometryReader { geometry in
            VStack(spacing: -20) {
                Spacer()
                
                // –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –¥–∞—Ç - —Ç–µ–ø–µ—Ä—å —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                VStack(spacing: 6) {
                    ForEach(entry.rates) { rate in
                        HStack {
                            Text(rate.flagEmoji)
                                .font(.title2)
                            
                            Text(rate.code)
                                .font(.headline)
                                .foregroundColor(colorScheme == .dark ? .white : .black)
                            
                            Spacer()
                            
                            Text("\(rate.formattedRate()) ‚ÇΩ")
                                .font(.headline)
                                .foregroundColor(colorScheme == .dark ? .white : .black)
                        }
                        .padding(.horizontal)
                        
                        if rate.id != entry.rates.last?.id {
                            Divider()
                                .background(colorScheme == .dark ? Color.gray.opacity(0.3) : Color.gray.opacity(0.2))
                                .padding(.horizontal)
                        }
                    }
                }
                .frame(maxHeight: .infinity)
                .padding(.vertical)
                
                Spacer()
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity)
        }
        .background(colorScheme == .dark ? Color.black : Color.white)
    }
}

// –í–∏–¥ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞ —Å 3 –≤–∞–ª—é—Ç–∞–º–∏
struct CurrencyWidgetSmallView: View {
    var entry: CurrencyRateProvider.Entry
    @Environment(\.colorScheme) private var colorScheme
    
    var body: some View {
        GeometryReader { geometry in
            VStack(spacing: 4) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º USD, EUR, TRY –∏ AED
                let visibleRates = entry.rates
                    .filter { ["USD", "EUR", "TRY", "AED"].contains($0.code) }
                    .sorted { (a, b) -> Bool in
                        let order = ["USD", "EUR", "TRY", "AED"]
                        return order.firstIndex(of: a.code) ?? 999 < order.firstIndex(of: b.code) ?? 999
                    }
                
                ForEach(visibleRates.prefix(4)) { rate in
                    HStack {
                        Text(rate.flagEmoji)
                            .font(.system(size: 16))
                        
                        Text(rate.code)
                            .font(.headline)
                            .foregroundColor(colorScheme == .dark ? .white : .black)
                        
                        Spacer()
                        
                        Text("\(rate.formattedRate()) ‚ÇΩ")
                            .font(.system(size: 14, weight: .semibold))
                            .foregroundColor(colorScheme == .dark ? .white : .black)
                    }
                    .padding(.horizontal, 5)
                    .padding(.vertical, 3)
                    
                    if rate.id != visibleRates.last?.id {
                        Divider()
                            .background(colorScheme == .dark ? Color.gray.opacity(0.3) : Color.gray.opacity(0.2))
                            .padding(.horizontal, 5)
                    }
                }
                
                Spacer()
            }
            .padding(.top, 4)
        }
        .background(colorScheme == .dark ? Color.black : Color.white)
    }
}

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
    struct CurrencyWidget: Widget {
        let kind: String = "CurrencyWidget"
        
        var body: some WidgetConfiguration {
            StaticConfiguration(kind: kind, provider: CurrencyRateProvider()) { entry in
                CurrencyWidgetEntryView(entry: entry)
            }
            .configurationDisplayName("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
            .description("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —Ä—É–±–ª—é")
            .supportedFamilies([.systemSmall, .systemMedium])
        }
    }

    // –í—ã–±–æ—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞
    struct CurrencyWidgetEntryView: View {
        var entry: CurrencyRateProvider.Entry
        @Environment(\.widgetFamily) var family
        
        var body: some View {
            switch family {
            case .systemSmall:
                CurrencyWidgetSmallView(entry: entry)
            case .systemMedium:
                CurrencyWidgetMediumView(entry: entry)
            default:
                CurrencyWidgetMediumView(entry: entry)
            }
        }
    }

    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
    struct CurrencyWidget_Previews: PreviewProvider {
        static var previews: some View {
            Group {
                // –ü—Ä–µ–≤—å—é –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                CurrencyWidgetEntryView(entry: CurrencyRateEntry(
                    date: Date(),
                    rates: [
                        CurrencyRate(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 85.5, flagEmoji: "üá∫üá∏"),
                        CurrencyRate(code: "EUR", name: "–ï–≤—Ä–æ", rate: 92.7, flagEmoji: "üá™üá∫"),
                        CurrencyRate(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.65, flagEmoji: "üáπüá∑"),
                        CurrencyRate(code: "AED", name: "–î–∏—Ä—Ö–∞–º –û–ê–≠", rate: 23.3, flagEmoji: "üá¶üá™")
                    ]
                ))
                .previewContext(WidgetPreviewContext(family: .systemMedium))
                .previewDisplayName("Medium - Dark")
                .environment(\.colorScheme, .dark)
                
                // –ü—Ä–µ–≤—å—é –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
                CurrencyWidgetEntryView(entry: CurrencyRateEntry(
                    date: Date(),
                    rates: [
                        CurrencyRate(code: "USD", name: "–î–æ–ª–ª–∞—Ä –°–®–ê", rate: 85.5, flagEmoji: "üá∫üá∏"),
                        CurrencyRate(code: "EUR", name: "–ï–≤—Ä–æ", rate: 92.7, flagEmoji: "üá™üá∫"),
                        CurrencyRate(code: "TRY", name: "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", rate: 2.65, flagEmoji: "üáπüá∑"),
                        CurrencyRate(code: "AED", name: "–î–∏—Ä—Ö–∞–º –û–ê–≠", rate: 23.3, flagEmoji: "üá¶üá™")
                    ]
                ))
                .previewContext(WidgetPreviewContext(family: .systemMedium))
                .previewDisplayName("Medium - Light")
                .environment(\.colorScheme, .light)
            }
        }
    }
